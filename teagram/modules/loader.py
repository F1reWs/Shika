import logging
import asyncio

import os
import re
import sys
import time

import atexit
import tempfile

import requests

from typing import List

from git import Repo
from git.exc import GitCommandError

from pyrogram import Client, types
from .. import loader, utils

VALID_URL = r"[-[\]_.~:/?#@!$&'()*+,;%<=>a-zA-Z0-9]+"
VALID_PIP_PACKAGES = re.compile(
    r"^\s*# required:(?: ?)((?:{url} )*(?:{url}))\s*$".format(url=VALID_URL),
    re.MULTILINE,
)
GIT_REGEX = re.compile(
    r"^https?://github\.com((?:/[a-z0-9-]+){2})(?:/tree/([a-z0-9-]+)((?:/[a-z0-9-]+)*))?/?$",
    flags=re.IGNORECASE,
)


async def get_git_raw_link(repo_url: str):
    """–ü–æ–ª—É—á–∏—Ç—å raw —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    match = GIT_REGEX.search(repo_url)
    if not match:
        return False

    repo_path = match.group(1)
    branch = match.group(2)
    path = match.group(3)

    r = await utils.run_sync(requests.get, f"https://api.github.com/repos{repo_path}")
    if r.status_code != 200:
        return False

    branch = branch or r.json()["default_branch"]

    return f"https://raw.githubusercontent.com{repo_path}/{branch}{path or ''}/"


@loader.module(name="Loader", author='teagram')
class LoaderMod(loader.Module):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π"""

    async def dlmod_cmd(self, app: Client, message: types.Message, args: str):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ —Å—Å—ã–ª–∫–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dlmod <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ all –∏–ª–∏ –Ω–∏—á–µ–≥–æ>"""
        modules_repo = self.db.get(
            "teagram.loader", "repo",
            "https://github.com/CodWize/teagram-modules"
        )
        api_result = await get_git_raw_link(modules_repo)
        if not api_result:
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.\n"
                        "–ü–æ–º–µ–Ω—è–π –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: dlrepo <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ reset>"
            )

        raw_link = api_result
        modules = await utils.run_sync(requests.get, raw_link + "all.txt")
        if modules.status_code != 200:
            return await utils.answer(
                message, (
                    f"‚ùå –í <a href=\"{modules_repo}\">—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</a> –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª all.txt\n"
                ), disable_web_page_preview=True
            )

        modules: List[str] = modules.text.splitlines()

        if not args:
            text = (
                f"üì• –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å <a href=\"{modules_repo}\">—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è</a>:\n\n"
                + "<code>all</code> - –∑–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ –º–æ–¥—É–ª–∏\n"
                + "\n".join(
                    map("<code>{}</code>".format, modules))
            )
            return await utils.answer(
                message, text, disable_web_page_preview=True)

        error_text: str = None
        module_name: str = None
        count = 0

        if args == "all":
            for module in modules:
                module = raw_link + module + ".py"
                try:
                    r = await utils.run_sync(requests.get, module)
                    if r.status_code != 200:
                        raise requests.exceptions.RequestException
                except requests.exceptions.RequestException:
                    continue

                if not (module_name := await self.all_modules.load_module(r.text, r.url)):
                    continue

                self.db.set("teagram.loader", "modules",
                            list(set(self.db.get("teagram.loader", "modules", []) + [module])))
                count += 1
        else:
            if args in modules:
                args = raw_link + args + ".py"

            try:
                r = await utils.run_sync(requests.get, args)
                if r.status_code != 200:
                    raise requests.exceptions.ConnectionError

                module_name = await self.all_modules.load_module(r.text, r.url)
                if module_name is True:
                    error_text = "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"

                if not module_name:
                    error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö"
            except requests.exceptions.MissingSchema:
                error_text = "‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ"
            except requests.exceptions.ConnectionError:
                error_text = "‚ùå –ú–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ"
            except requests.exceptions.RequestException:
                error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö"

            if error_text:
                return await utils.answer(message, error_text)

            self.db.set("teagram.loader", "modules",
                        list(set(self.db.get("teagram.loader", "modules", []) + [args])))

        return await utils.answer(
            message, (
                f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –∑–∞–≥—Ä—É–∂–µ–Ω"
                if args != "all"
                else f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> –∏–∑ <b>{len(modules)}</b> –º–æ–¥—É–ª–µ–π"
            )
        )

    async def loadmod_cmd(self, app: Client, message: types.Message):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ —Ñ–∞–π–ª—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª>"""
        reply = message.reply_to_message
        file = (
            message
            if message.document
            else reply
            if reply and reply.document
            else None
        )

        if not file:
            return await utils.answer(
                message, "‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Ñ–∞–π–ª")

        file = await reply.download()

        modules = [
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater'
        ]
        
        for mod in modules:
            if file == mod:
                return await utils.answer(
                    message,
                    "‚ùå –ù–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
                )

        try:
            with open(file, "r", encoding="utf-8") as file:
                module_source = file.read()
        except UnicodeDecodeError:
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞")

        module_name = await self.all_modules.load_module(module_source)

        if module_name is True:
            return await utils.answer(
                message, "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")

        if not module_name:
            return await utils.answer(
                message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö")
        
        module = '_'.join(module_name.lower().split())
        with open(f'teagram/modules/{module}.py', 'w', encoding="utf-8") as file:
            file.write(module_source)
        
        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –∑–∞–≥—Ä—É–∂–µ–Ω")

    async def unloadmod_cmd(self, app: Client, message: types.Message, args: str):
        """–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: unloadmod <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        if not (module_name := self.all_modules.unload_module(args)):
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")
        
        modules = [
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater'
        ]
        
        if module_name in modules:
            return await utils.answer(
                message,
                "‚ùå –í—ã–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–ª—å–∑—è"
            )

        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –≤—ã–≥—Ä—É–∂–µ–Ω")
    
    async def reloadmod_cmd(self, app: Client, message: types.Message, args: str):
        if not args:
            return await utils.answer(
                message, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–æ–¥—É–ª—å")
        
        try:
            module = args.split(maxsplit=1)[0].replace('.py', '')

            modules = [
                'config',
                'eval',
                'help',
                'info',
                'moduleGuard',
                'terminal',
                'tester',
                'updater',
                'loader'
            ]
            
            for mod in modules:
                if module == mod:
                    return await utils.answer(
                        message,
                        "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
                    )

            if module + '.py' not in os.listdir('teagram/modules'):
                return await utils.answer(
                    message,
                    f'‚ùå –ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                )
            
            unload = self.all_modules.unload_module(module)
            with open('teagram/modules/' + module + '.py', 'r', encoding='utf-8') as file:
                module_source = file.read()

            load = await self.all_modules.load_module(module_source)

            if not load and not unload:
                return await utils.answer(
                    message,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
                )
        except Exception as error:
            logging.error(error)
            return await utils.answer(
                message,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
            )


        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module}</code>\" –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")

    async def restart_cmd(self, app: Client, message: types.Message, update: bool = False):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        def restart() -> None:
            """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —é–∑–µ—Ä–±–æ—Ç–∞"""
            os.execl(sys.executable, sys.executable, "-m", "teagram")

        atexit.register(restart)
        self.db.set(
            "teagram.loader", "restart", {
                "msg": f"{message.chat.id}:{message.id}",
                "start": time.time(),
                "type": "restart"
            }
        )

        await utils.answer(message, "<b><emoji id=5328274090262275771>üîÅ</emoji> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</b>")

        logging.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        return sys.exit(0)


    async def dlrepo_cmd(self, app: Client, message: types.Message, args: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –º–æ–¥—É–ª—è–º–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dlrepo <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ reset>"""
        if not args:
            return await utils.answer(
                message, "‚ùå –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        if args == "reset":
            self.db.set(
                "teagram.loader", "repo",
                "https://github.com/CodWize/teagram-modules"
            )
            return await utils.answer(
                message, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

        if not await get_git_raw_link(args):
            return await utils.answer(
                message, "‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")

        self.db.set("teagram.loader", "repo", args)
        return await utils.answer(
            message, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
