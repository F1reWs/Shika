from .. import loader, utils, validators
from ..types import Config, ConfigValue

from pyrogram import types
from googletrans import Translator, LANGUAGES
from googletrans.models import Translated

@loader.module('Translator', 'teagram')
class TranslatorMod(loader.Module):
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
    
    def __init__(self):
        language = self.db.get('Translator', 'language')
        
        if language is None:
            language = 'en'

        self.config = Config(
            ConfigValue(
                'language',
                'en',
                language,
                validators.String()
            )
        )

    async def translate_cmd(self, app, message: types.Message, args):
        """–ü–µ—Ä–µ–≤–æ–¥"""
        if not (text := args):
            if not (text := message.reply_to_message.text):
                return await utils.answer(
                    message,
                    '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                )
        
        if (lang := self.config.get('language')) not in LANGUAGES:
            return await utils.answer(
                message,
                f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫ (`{lang}`)'
            )
        
        translated: Translated = Translator().translate(text, dest=lang) # type: ignore
        
        await utils.answer(
            message,
            f"""
üëÖ –Ø–∑—ã–∫ <b>{translated.src} -> {lang}</b>
üó£ –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ <b>{translated.pronunciation}</b>

‚û° –¢–µ–∫—Å—Ç:
<b>{translated.origin}</b>

‚û° –ü–µ—Ä–µ–≤–æ–¥:
<b>{translated.text}</b>
"""
        )

