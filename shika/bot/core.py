#     ______   __        _   __              
#   .' ____ \ [  |      (_) [  |  _          
#   | (___ \_| | |--.   __   | | / ]  ,--.   
#    _.____`.  | .-. | [  |  | '' <  `'_\ :  
#   | \____) | | | | |  | |  | |`\ \ // | |, 
#    \______.'[___]|__][___][__|  \_]\'-;__/ 

#    Shika (telegram userbot by https://github.com/F1reWs/Shika/graphs/contributors)
#    Copyright (C) 2023 Shika

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    GNU General Public License https://www.gnu.org/licenses.

import logging
import asyncio
import sys

from aiogram import Bot, Dispatcher, exceptions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram import Client

from typing import Union, NoReturn
from loguru import logger

from .events import Events
from .token_manager import TokenManager

from .. import database, __version__, types


class BotManager(
    Events,
    TokenManager
):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""

    def __init__(
        self,
        app: Client,
        db: database.Database,
        all_modules: types.ModulesManager
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            app (``pyrogram.Client``):
                –ö–ª–∏–µ–Ω—Ç

            db (``database.Database``):
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

            all_modules (``loader.Modules``):
                –ú–æ–¥—É–ª–∏
        """
        self._app = app
        self._db = db
        self._all_modules = all_modules

        self._token = self._db.get("shika.bot", "token", None)

    async def load(self) -> Union[bool, NoReturn]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞...")
        error_text = "–Æ–∑–µ—Ä–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –±–æ—Ç. –†–µ—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–π —é–∑–µ—Ä–±–æ—Ç –∑–∞–Ω–æ–≤–æ"

        not_set_token = False

        if not self._token:
            print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω...")

            not_set_token = True

            token = await self._create_bot()
            self._token = token

            if self._token is False:
                logging.error(error_text)
                return sys.exit(1)

            self._db.set("shika.bot", "token", self._token)

        try:
            self.bot = Bot(self._token, parse_mode="html")
        except (exceptions.ValidationError, exceptions.Unauthorized):
            print("–¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—á–∏–π. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω...")
         
            result = await self._revoke_token()

            if not result:
                self._token = await self._create_bot()
                if not self._token:
                    logging.error(error_text)
                    return sys.exit(1)

                self._db.set("shika.bot", "token", self._token)
                return await self.load()
            else:
                self._token = result
                self._db.set("shika.bot", "token", self._token)

                return await self.load()

        self._dp = Dispatcher(self.bot)

        self._dp.register_message_handler(
            self._message_handler, lambda _: True,
            content_types=["any"]
        )
        self._dp.register_inline_handler(
            self._inline_handler, lambda _: True
        )
        self._dp.register_callback_query_handler(
            self._callback_handler, lambda _: True
        )

        asyncio.ensure_future(
            self._dp.start_polling())

        self.bot.manager = self

        logger.success("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

        me_info = await self._app.get_me()

        hello_text = f"""<b>
üëã –ü—Ä–∏–≤–µ—Ç, {me_info.first_name}!

üíª –¢–≤–æ–π —é–∑–µ—Ä–±–æ—Ç Shika —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üìî –ë—ã—Å—Ç—Ä—ã–π –≥–∞–π–¥

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ <code>.help</code> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
2Ô∏è‚É£ –ù–∞–ø–∏—à–∏ <code>.help [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è]</code> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–¥—É–ª—è
3Ô∏è‚É£ –ù–∞–ø–∏—à–∏ <code>.dlmod [—Å—Å—ã–ª–∫–∞]</code> —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Å—Å—ã–ª–∫–∏
4Ô∏è‚É£ –ù–∞–ø–∏—à–∏ <code>.loadmod</code> –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ –Ω–µ–≥–æ
5Ô∏è‚É£ –ù–∞–ø–∏—à–∏ <code>.unloadmod [–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è]</code> —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
</b>
"""
        
        keyboard = InlineKeyboardMarkup(
     ).add(
        InlineKeyboardButton("üóû –ù–æ–≤–æ—Å—Ç–∏", url="https://t.me/shikaub"),
     ).add(
        InlineKeyboardButton("üí¨ –ß–∞—Ç", url="https://t.me/shika_chat"),
        InlineKeyboardButton("üñ• –ú–æ–¥—É–ª–∏", url="https://t.me/shika_chat/12"),
     ).add(
        InlineKeyboardButton("üêà‚Äç‚¨õ Github", url="https://github.com/F1reWs/Shika"),
     )

        if not_set_token == True:
            await self.bot.send_photo(chat_id=me_info.id, photo="https://global-uploads.webflow.com/6030eb20edb267a2d11d31f6/62ea266ac8026819f977ca7d_07UG_TelegramforBusiness_8bb65f395e5cea9300a99d7185d69afb_2000.png", caption=hello_text, parse_mode="HTML", reply_markup=keyboard)

        return True#
