#     ______   __        _   __              
#   .' ____ \ [  |      (_) [  |  _          
#   | (___ \_| | |--.   __   | | / ]  ,--.   
#    _.____`.  | .-. | [  |  | '' <  `'_\ :  
#   | \____) | | | | |  | |  | |`\ \ // | |, 
#    \______.'[___]|__][___][__|  \_]\'-;__/ 

#    Shika (telegram userbot by https://github.com/F1reWs/Shika/graphs/contributors)
#    Copyright (C) 2023 Shika

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    GNU General Public License https://www.gnu.org/licenses.

import time
import io
import os
import logging
from logging import StreamHandler

from pyrogram import Client, types

from .. import loader, utils


class CustomStreamHandler(StreamHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.logs: list = []

    def emit(self, record):
        self.logs.append(record)

        super().emit(record)

handler = CustomStreamHandler()
log = logging.getLogger()
log.addHandler(handler)

@loader.module(name="Tester", author="shika")
class TesterMod(loader.Module):
    """–¢–µ—Å—Ç —á–µ–≥–æ-—Ç–æ"""

    async def logs_cmd(self, app: Client, message: types.Message, args: str):
        app.me = await app.get_me()
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: logs <—É—Ä–æ–≤–µ–Ω—å>"""
        if not args:
            args = "40"

        try:
          lvl = int(args)
        except:
            return await utils.answer(
                message, "<b><emoji id=5312526098750252863>‚ùå</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤</b>")

        if not args or lvl < 0 or lvl > 60:
            return await utils.answer(
                message, "<b><emoji id=5312526098750252863>‚ùå</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤</b>")

        handler: CustomStreamHandler = log.handlers[1] # type: ignore
        logs = '\n'.join(str(error) for error in handler.logs).encode('utf-8')
        
        if not logs:
            return await utils.answer(
                message, f"<b><emoji id=5314302076317081739>‚ùï</emoji> –ù–µ—Ç –ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl} ({logging.getLevelName(lvl)})</b>")

        logs = io.BytesIO(logs)
        logs.name = "shika.log"

        await message.reply_document(
            document=logs,
            caption=f"<b><emoji id=5433614747381538714>üì§</emoji> Shika –õ–æ–≥–∏ —Å {lvl} ({logging.getLevelName(lvl)}) —É—Ä–æ–≤–Ω–µ–º</b>"
            )
        return await message.delete()
    
    async def setprefix_cmd(self, app: Client, message: types.Message, args: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: setprefix <–ø—Ä–µ—Ñ–∏–∫—Å> [–ø—Ä–µ—Ñ–∏–∫—Å, ...]"""
        if not (args := args.split()):
            return await utils.answer(
                message, "<b><emoji id=6334850502722848701>‚ùî</emoji> –ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?</b>")

        self.db.set("shika.loader", "prefixes", list(set(args)))
        prefixes = ", ".join(f"<code>{prefix}</code>" for prefix in args)
        return await utils.answer(
            message, f"<b><emoji id=6334758581832779720>‚úÖ</emoji> –ü—Ä–µ—Ñ–∏–∫—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {prefixes}</b>")

    async def addalias_cmd(self, app: Client, message: types.Message, args: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: addalias <–Ω–æ–≤—ã–π –∞–ª–∏–∞—Å> <–∫–æ–º–∞–Ω–¥–∞>"""
        prefix = self.db.get("shika.loader", "prefixes", ["."])[0]
        if not (args := args.lower().split(maxsplit=1)):
            return await utils.answer(
                message, "<b><emoji id=6334850502722848701>‚ùî</emoji> –ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å?</b>")

        if len(args) != 2:
            return await utils.answer(
                message, "<b><emoji id=5312526098750252863>‚ùå</emoji> –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>"
                        f"<emoji id=6334758581832779720>‚úÖ</emoji><b> –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <code>{prefix}addalias –Ω–æ–≤—ã–π_–∞–ª–∏–∞—Å –∫–æ–º–∞–Ω–¥–∞</code></b>"
            )

        aliases = self.all_modules.aliases
        if args[0] in aliases:
            return await utils.answer(
                message, "<b><emoji id=5312526098750252863>‚ùå</emoji> –¢–∞–∫–æ–π –∞–ª–∏–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")

        if not self.all_modules.command_handlers.get(args[1]):
            return await utils.answer(
                message, "<b><emoji id=5312526098750252863>‚ùå</emoji> –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç</b>")

        aliases[args[0]] = args[1]
        self.db.set("shika.loader", "aliases", aliases)

        return await utils.answer(
            message, f"<emoji id=6334758581832779720>‚úÖ</emoji><b> –ê–ª–∏–∞—Å <code>{args[0]}</code> –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <code>{args[1]}</code> –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω</b>")

    async def delalias_cmd(self, app: Client, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: delalias <–∞–ª–∏–∞—Å>"""
        if not (args := args.lower()):
            return await utils.answer(
                message, "<emoji id=6334850502722848701>‚ùî</emoji><b> –ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?</b>")

        aliases = self.all_modules.aliases
        if args not in aliases:
            return await utils.answer(
                message, "<emoji id=5312526098750252863>‚ùå</emoji><b> –¢–∞–∫–æ–≥–æ –∞–ª–∏–∞—Å–∞ –Ω–µ—Ç</b>")

        del aliases[args]
        self.db.set("shika.loader", "aliases", aliases)

        return await utils.answer(
            message, f"<emoji id=6334758581832779720>‚úÖ</emoji><b> –ê–ª–∏–∞—Å <code>{args}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω</b>")

    async def aliases_cmd(self, app: Client, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã"""
        aliases = self.all_modules.aliases
        if not aliases:
            return await utils.answer(
                message, "<emoji id=5312526098750252863>‚ùå</emoji><b>–ê–ª–∏–∞—Å–æ–≤ –Ω–µ—Ç</b>")

        return await utils.answer(
            message, "üóÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–ª–∏–∞—Å–æ–≤:\n" + "\n".join(
                f"‚Ä¢ <code>{alias}</code> ‚ûú {command}"
                for alias, command in aliases.items()
            )
        )

    async def ping_cmd(self, app: Client, message: types.Message, args: str):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–µ –ø–∏–Ω–≥–∞"""
        start = time.perf_counter_ns()
        await utils.answer(message, "üåÄ")
        ping = round((time.perf_counter_ns() - start) / 10**6, 3)
        await utils.answer(
            message,
            f"""
<emoji id=5445284980978621387>üöÄ</emoji> **–í—Ä–µ–º—è –æ—Ç–ª–∏–∫–∞ Telegram:** `{ping}ms`
            """
        )

