#     ______   __        _   __              
#   .' ____ \ [  |      (_) [  |  _          
#   | (___ \_| | |--.   __   | | / ]  ,--.   
#    _.____`.  | .-. | [  |  | '' <  `'_\ :  
#   | \____) | | | | |  | |  | |`\ \ // | |, 
#    \______.'[___]|__][___][__|  \_]\'-;__/ 

#    Shika (telegram userbot by https://github.com/F1reWs/Shika/graphs/contributors)
#    Copyright (C) 2023 Shika

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    GNU General Public License https://www.gnu.org/licenses.

import logging
import asyncio

import io
import os
import re
import sys
import time

import atexit
import tempfile

import requests

from typing import List

from git import Repo
from git.exc import GitCommandError

from pyrogram import Client, types
from .. import loader, utils
from ..types import Config, ConfigValue

VALID_URL = r"[-[\]_.~:/?#@!$&'()*+,;%<=>a-zA-Z0-9]+"
VALID_PIP_PACKAGES = re.compile(
    r"^\s*# required:(?: ?)((?:{url} )*(?:{url}))\s*$".format(url=VALID_URL),
    re.MULTILINE,
)

GIT_REPO_REGEX = re.compile(r'^https://github\.com/([^/]+)/([^/]+)$')

async def get_git_raw_link(repo_url: str) -> str:
    match = GIT_REPO_REGEX.search(repo_url)
    if not match:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub")

    owner = match.group(1)
    repo = match.group(2)

    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è default_branch –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub API:
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
    response = await utils.run_sync(requests.get, f"https://api.github.com/repos/{owner}/{repo}")
    if response.status_code == 200:
         default_branch = response.json().get("default_branch", "main")
    else:
         default_branch = "main"  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –í–º–µ—Å—Ç–æ {default_branch} –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π default_branch
    raw_url = f"https://raw.githubusercontent.com/{owner}/{repo}/{default_branch}/"

    return raw_url


@loader.module(name="Loader", author='shika')
class LoaderMod(loader.Module):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π"""

    def __init__(self):
        self.boot_time = time.time()
        self.config = Config(
            ConfigValue(
                option='repo',
                description='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–¥—É–ª–µ–π',
                default='https://github.com/F1reWs/shika_modules',
                value='https://github.com/F1reWs/shika_modules',
            )
        )

    async def dlmod_cmd(self, app: Client, message: types.Message, args: str):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ —Å—Å—ã–ª–∫–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dlmod <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        modules_repo = self.db.get("Loader", "repo")
        module_name = None
        error_text = False
        
        if not modules_repo:
            modules_repo = "https://github.com/F1reWs/shika_modules"
            self.db.set("Loader", "repo", modules_repo)

        if not args:
            return await utils.answer(message, "<emoji id=5312526098750252863>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É/–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è</b>")

        if modules_repo:
            api_result = await get_git_raw_link(modules_repo)
            if api_result:
                raw_link = api_result
                old_args = args
                args = raw_link + args + ".py"
        try:
            r = await utils.run_sync(requests.get, args)
            r.raise_for_status()  # –ë—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π

            module_name = await self.all_modules.load_module(r.text, r.url)
            if module_name is True:
                error_text = f"<emoji id=5348498983884960309>üöÄ</emoji> <b>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ </b>{prefix}restart"

            if not module_name:
                error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö"
        except requests.exceptions.MissingSchema:
            error_text = "‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ"
        except requests.exceptions.RequestException as e:
            args = old_args
            try:
              r = await utils.run_sync(requests.get, args)
              r.raise_for_status()  # –ë—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π

              module_name = await self.all_modules.load_module(r.text, r.url)
              if module_name is True:
                  error_text = f"<emoji id=5348498983884960309>üöÄ</emoji> <b>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ </b>{prefix}restart"

              if not module_name:
                   error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö"
            except requests.exceptions.MissingSchema:
                 error_text = "‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ"
            except requests.exceptions.RequestException as e:
               error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}"

        if error_text:
            return await utils.answer(message, error_text)

        self.db.set("shika.loader", "modules", list(set(self.db.get("shika.loader", "modules", []) + [args])))
        prefix = self.db.get("shika.loader", "prefixes", ["."])[0]

        command_descriptions = ""
        inline_descriptions = ""
        module_version = ""
        module_author = ""

        command_descriptions = "\n".join(
            f"<emoji id=5100862156123931478>üî∏</emoji> <code>{prefix + command}</code> {module_name.command_handlers[command].__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'}"
            for command in module_name.command_handlers
        )
        inline_descriptions = "\n".join(
            f"<emoji id=5100862156123931478>üî∏</emoji> <code>@{self.bot_username + ' ' + command}</code> {module_name.inline_handlers[command].__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'}"
            for command in module_name.inline_handlers
        )

        if mod.version:
            module_version = f" (<code>{module_name.version}</code>)"

        if mod.author:
            module_author = f"<b>by <code>{module_name.author}</code></b>"
        
        return await utils.answer(
            message, f"""<b>
<emoji id=5891237108974095799>üåà</emoji> –ú–æ–¥—É–ª—å <code>{module_name}</code>{module_version} –∑–∞–≥—Ä—É–∂–µ–Ω {utils.ascii_face}
<emoji id=5983568653751160844>‚ÑπÔ∏è</emoji> </b><i>{module_name.__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è'}</i>

{command_descriptions}
{inline_descriptions}
{module_author}
""")

    async def loadmod_cmd(self, app: Client, message: types.Message):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ —Ñ–∞–π–ª—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª>"""
        reply = message.reply_to_message
        file = (
            message
            if message.document
            else reply
            if reply and reply.document
            else None
        )

        if not file:
            return await utils.answer(
                message, "‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Ñ–∞–π–ª")
        
        await message.edit(f"<b><emoji id=5325792861885570739>üîÑ</emoji> –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–¥—É–ª—å...</b>")

        file = await reply.download()

        modules = [
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater'
        ]
        
        for mod in modules:
            if file == mod:
                return await utils.answer(
                    message,
                    "‚ùå –ù–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
                )

        try:
            with open(file, "r", encoding="utf-8") as file:
                module_source = file.read()
        except UnicodeDecodeError:
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞")

        mod = await self.all_modules.load_module(module_source)
        module_name = mod.name

        if module_name is True:
            return await utils.answer(
                message, "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")

        if not module_name:
            return await utils.answer(
                message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö")
        
        module = '_'.join(module_name.lower().split())
        with open(f'shika/modules/{module}.py', 'w', encoding="utf-8") as file:
            file.write(module_source)

        prefix = self.db.get("shika.loader", "prefixes", ["."])[0]

        command_descriptions = ""
        inline_descriptions = ""
        module_version = ""
        module_author = ""

        command_descriptions = "\n".join(
            f"<emoji id=5100862156123931478>üî∏</emoji> <code>{prefix + command}</code> {mod.command_handlers[command].__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'}"
            for command in mod.command_handlers
        )
        inline_descriptions = "\n".join(
            f"<emoji id=5100862156123931478>üî∏</emoji> <code>@{self.bot_username + ' ' + command}</code> {mod.inline_handlers[command].__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'}"
            for command in mod.inline_handlers
        )

        if mod.version:
            module_version = f" (<code>{mod.version}</code>)"

        if mod.author:
            module_author = f"<b>by <code>{mod.author}</code></b>"
        
        return await utils.answer(
            message, f"""<b>
<emoji id=5891237108974095799>üåà</emoji> –ú–æ–¥—É–ª—å <code>{module_name}</code>{module_version} –∑–∞–≥—Ä—É–∂–µ–Ω {utils.ascii_face}
<emoji id=5983568653751160844>‚ÑπÔ∏è</emoji> </b><i>{mod.__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è'}</i>

{command_descriptions}
{inline_descriptions}
{module_author}
""")
    
    async def ml_cmd(self, app: Client, message: types.Message, args: str):
        """–°–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è"""
        app.me = await app.get_me()
        prefix = self.db.get("shika.loader", "prefixes", ["."])[0]
        if not args:
            return await utils.answer(
            message, "<emoji id=5312526098750252863>‚ùå</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–æ–¥—É–ª—å</b>")

        await message.edit(f"<emoji id=5327902038720257153>üîÑ</emoji><b>–û—Ç–ø—Ä–∞–≤–ª—è—é –º–æ–¥—É–ª—å...</b>")
        module = args
        module_l = module.lower()
        if module + '.py' not in os.listdir('./shika/modules'):
            mods = self.db.get("shika.loader", "modules")
            if mods:
             for mod in mods:
                if module_l in mod.lower():
                    response = requests.get(mod)
                    content = response.content
                    file = io.BytesIO(content)
                    await message.reply_document(file_name=module+".py", document=file, caption=f'''<b>
<emoji id=5433653135799228968>üìÅ</emoji> –ú–æ–¥—É–ª—å <code>{module}</code>

<emoji id=5318808961594437445>üåê</emoji> <a href="{mod}">–°—Å—ã–ª–∫–∞</a> –Ω–∞ <code>{module}</code>

<emoji id=6334353510582191829>‚¨áÔ∏è</emoji> <code>{prefix}dlmod {mod}</code>
</b>''',
                )
                    return await message.delete()
            return await utils.answer(
                    message,
                    f'<emoji id=5312526098750252863>‚ùå</emoji> <b>–ú–æ–¥—É–ª—å <code>{module}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω</b>'
                )
        with open('./shika/modules/' + module + '.py', 'rb') as file:
            await message.reply_document(document=file, caption=f"""<b>
<emoji id=5433653135799228968>üìÅ</emoji> –ú–æ–¥—É–ª—å <code>{module}</code>

<emoji id=6334353510582191829>‚¨áÔ∏è</emoji> –ù–∞–ø–∏—à–∏—Ç–µ <code>{prefix}loadmod</code> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
</b>""", file_name=module+".py")
            await message.delete()

    async def unloadmod_cmd(self, app: Client, message: types.Message, args: str):
        """–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: unloadmod <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        if not (module_name := self.all_modules.unload_module(args)):
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")
        
        modules = [
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater'
        ]
        
        if module_name in modules:
            return await utils.answer(
                message,
                "‚ùå –í—ã–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–ª—å–∑—è"
            )
        
        module = '_'.join(module_name.lower().split())
        try:
            os.remove(f'shika/modules/{module}.py')
        except:
            pass

        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –≤—ã–≥—Ä—É–∂–µ–Ω")
    
    async def reloadmod_cmd(self, app: Client, message: types.Message, args: str):
        if not args:
            return await utils.answer(
                message, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–æ–¥—É–ª—å")
        
        try:
            module = args.split(maxsplit=1)[0].replace('.py', '')

            modules = [
                'config',
                'eval',
                'help',
                'info',
                'moduleGuard',
                'terminal',
                'tester',
                'updater',
                'loader'
            ]
            
            for mod in modules:
                if module == mod:
                    return await utils.answer(
                        message,
                        "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
                    )

            if module + '.py' not in os.listdir('shika/modules'):
                return await utils.answer(
                    message,
                    f'‚ùå –ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                )
            
            unload = self.all_modules.unload_module(module)
            with open('shika/modules/' + module + '.py', 'r', encoding='utf-8') as file:
                module_source = file.read()

            load = await self.all_modules.load_module(module_source)

            if not load and not unload:
                return await utils.answer(
                    message,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
                )
        except Exception as error:
            logging.error(error)
            return await utils.answer(
                message,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
            )


        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module}</code>\" –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")

    async def restart_cmd(self, app: Client, message: types.Message, update: bool = False):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        def restart() -> None:
            """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —é–∑–µ—Ä–±–æ—Ç–∞"""
            os.execl(sys.executable, sys.executable, "-m", "shika")

        atexit.register(restart)
        self.db.set(
            "shika.loader", "restart", {
                "msg": f"{message.chat.id}:{message.id}",
                "start": time.time(),
                "type": "restart"
            }
        )

        await utils.answer(message, "<b><emoji id=5328274090262275771>üîÅ</emoji> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</b>")

        logging.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        return sys.exit(0)


    async def dlrepo_cmd(self, app: Client, message: types.Message, args: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –º–æ–¥—É–ª—è–º–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dlrepo <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ reset>"""
        if not args:
            return await utils.answer(
                message, "‚ùå –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        if args == "reset":
            self.db.set(
                "shika.loader", "repo",
                "https://github.com/F1reWs/shika_modules"
            )
            return await utils.answer(
                message, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

        if not await get_git_raw_link(args):
            return await utils.answer(
                message, "‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")

        self.db.set("shika.loader", "repo", args)
        return await utils.answer(
            message, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
