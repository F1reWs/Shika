#     ______   __        _   __              
#   .' ____ \ [  |      (_) [  |  _          
#   | (___ \_| | |--.   __   | | / ]  ,--.   
#    _.____`.  | .-. | [  |  | '' <  `'_\ :  
#   | \____) | | | | |  | |  | |`\ \ // | |, 
#    \______.'[___]|__][___][__|  \_]\'-;__/ 

#    Shika (telegram userbot by https://github.com/F1reWs/Shika/graphs/contributors)
#    Copyright (C) 2023 Shika

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    GNU General Public License https://www.gnu.org/licenses.

import asyncio
import functools
import random
import string
import typing
import yaml
import os
import git
from git import *
import contextlib
import aiohttp
from types import FunctionType
from typing import Any, List, Literal, Tuple, Union
from urllib.parse import urlparse

from pyrogram.file_id import PHOTO_TYPES, FileId
from pyrogram.types import Chat, Message, User
from pyrogram import Client

from . import database


def get_full_command(message: Message) -> Union[
    Tuple[Literal[""], Literal[""], Literal[""]], Tuple[str, str, str]
]:
    """–í—ã–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (``pyrogram.types.Message``):
            –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    message.text = str(message.text or message.caption)
    prefixes = database.db.get("shika.loader", "prefixes", ["."])

    for prefix in prefixes:
        if (
            message.text
            and len(message.text) > len(prefix)
            and message.text.startswith(prefix)
        ):
            command, *args = message.text[len(prefix):].split(maxsplit=1)
            break
    else:
        return "", "", ""

    return prefixes[0], command.lower(), args[-1] if args else ""

def get_git_hash() -> typing.Union[str, bool]:
    """
    Get current Shika git hash
    :return: Git commit hash
    """
    try:
        return git.Repo().head.commit.hexsha
    except Exception:
        return False


async def answer(
    message: Union[Message, List[Message]],
    response: Union[str, Any],
    chat_id: Union[str, int] = None,
    doc: bool = False,
    photo: bool = False,
    disable_preview: bool = False,
    **kwargs
) -> List[Message]:
    """–í –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ –æ–±—ã—á–Ω—ã–π message.edit, –Ω–æ:
        - –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ (4096 —Å–∏–º–≤–æ–ª–æ–≤),
            —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        - –†–∞–±–æ—Ç–∞–µ—Ç message.reply, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (``pyrogram.types.Message`` | ``typing.List[pyrogram.types.Message]``):
            –°–æ–æ–±—â–µ–Ω–∏–µ

        response (``str`` | ``typing.Any``):
            –¢–µ–∫—Å—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

        chat_id (``str`` | ``int``, optional):
            –ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        doc/photo (``bool``, optional):
            –ï—Å–ª–∏ ``True``, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ

        kwargs (``dict``, optional):
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    messages: List[Message] = []

    if isinstance(message, list):
        message = message[0]

    if isinstance(response, str) and all(not arg for arg in [doc, photo]):
        outputs = [
            response[i: i + 4096]
            for i in range(0, len(response), 4096)
        ]

        if chat_id:
            messages.append(
                await message._client.send_message(
                    chat_id, outputs[0], **kwargs, disable_web_page_preview=disable_preview)
            )
        else:
            messages.append(
                await (
                    message.edit if message.outgoing
                    else message.reply
                )(outputs[0], **kwargs, disable_web_page_preview=disable_preview)
            )

        for output in outputs[1:]:
            messages.append(
                await messages[0].reply(output, **kwargs, disable_web_page_preview=disable_preview)
            )

    elif doc:
        if chat_id:
            messages.append(
                await message._client.send_document(
                    chat_id, response, **kwargs, disable_web_page_preview=disable_preview)
            )
        else:
            messages.append(
                await message.reply_document(response, **kwargs, disable_web_page_preview=disable_preview)
            )

    elif photo:
        if chat_id:
            messages.append(
                await message._client.send_photo(
                    chat_id, response, **kwargs, disable_web_page_preview=disable_preview)
            )
        else:
            messages.append(
                await message.reply_photo(response, **kwargs, disable_web_page_preview=disable_preview)
            )

    return messages

async def answer_inline(
    message: Union[Message, List[Message]],
    bot: Union[str, int],
    query: str,
    chat_id: Union[str, int] = ''
) -> None:
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (``pyrogram.types.Message`` | ``typing.List[pyrogram.types.Message]``):
            –°–æ–æ–±—â–µ–Ω–∏–µ

        bot (``str`` | ``int``):
            –ù–∏–∫ –∏–ª–∏ –∞–∏–¥–∏ –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞
        
        query (``str``):
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞

        chat_id (``str`` | ``int``, optional):
            –ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–ª–∞–π–Ω–∞
    """

    if isinstance(message, list):
        message = message[0]

    app: Client = message._client
    message: Message

    results = await app.get_inline_bot_results(bot, query)

    try:
       await app.send_inline_bot_result(
        chat_id or message.chat.id,
        results.query_id,
        results.results[0].id,
        reply_to_message_id=message.reply_to_top_message_id or message.reply_to_message.id or message.reply_to_message_id,
       )
    except:
        await app.send_inline_bot_result(
        chat_id or message.chat.id,
        results.query_id,
        results.results[0].id)

def run_sync(func: FunctionType, *args, **kwargs) -> asyncio.Future:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–æ–Ω-–∞—Å–∏–Ω–∫ —Ñ—É–Ω–∫—Ü–∏—é

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        func (``types.FunctionType``):
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞

        args (``list``):
            –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫ —Ñ—É–Ω–∫—Ü–∏–∏

        kwargs (``dict``):
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    return asyncio.get_event_loop().run_in_executor(
        None, functools.partial(
            func, *args, **kwargs)
    )


def get_message_media(message: Message) -> Union[str, None]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (``pyrogram.types.Message``):
            –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    return getattr(message, message.media or "", None)


def get_media_ext(message: Message) -> Union[str, None]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (``pyrogram.types.Message``):
            –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not (media := get_message_media(message)):
        return None

    media_mime_type = getattr(media, "mime_type", "")
    extension = message._client.mimetypes.guess_extension(media_mime_type)

    if not extension:
        extension = ".unknown"
        file_type = FileId.decode(
            media.file_id).file_type

        if file_type in PHOTO_TYPES:
            extension = ".jpg"

    return extension


def get_display_name(entity: Union[User, Chat]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        entity (``pyrogram.types.User`` | ``pyrogram.types.Chat``):
            –°—É—â–Ω–æ—Å—Ç—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    """
    return getattr(entity, "title", None) or (
        entity.first_name or "" + (
            " " + entity.last_name
            if entity.last_name else ""
        )
    )

def get_ram() -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–º—è—Ç–∏."""
    try:
        import psutil
        process = psutil.Process(os.getpid())
        mem = process.memory_info()[0] / 2.0**20
        for child in process.children(recursive=True):
            mem += child.memory_info()[0] / 2.0**20
        return round(mem, 1)
    except:
        return 0

def get_cpu() -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ."""
    try:
        import psutil
        process = psutil.Process(os.getpid())
        cpu = process.cpu_percent()
        for child in process.children(recursive=True):
            cpu += child.cpu_percent()
        return round(cpu, 1)
    except:
        return 0
    
def get_platform() -> str:
    """–í–æ–∑—Ä–∞—â–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."""
    IS_TERMUX = "com.termux" in os.environ.get("PREFIX", "")
    IS_CODESPACES = "CODESPACES" in os.environ
    IS_DOCKER = "DOCKER" in os.environ
    IS_GOORM = "GOORM" in os.environ
    IS_WIN = "WINDIR" in os.environ
    IS_WSL = False
    
    with contextlib.suppress(Exception):
        from platform import uname
        if "microsoft-standard" in uname().release:
            IS_WSL = True

    if IS_TERMUX:
        platform = "<emoji id=5407025283456835913>üì±</emoji> Termux"
    elif IS_DOCKER:
        platform = "<emoji id=5431815452437257407>üê≥</emoji> Docker"
    elif IS_GOORM:
        platform = "<emoji id=5215584860063669771>üíö</emoji> Goorm"
    elif IS_WSL:
        platform = "<emoji id=6327609909416298142>üß±</emoji> WSL"
    elif IS_WIN:
        platform = "<emoji id=5309880373126113150>üíª</emoji> Windows"
    elif IS_CODESPACES:
        platform = "<emoji id=5467643451145199431>üë®‚Äçüíª</emoji> Github Codespaces"
    else:
        platform = "üñ•Ô∏è VDS"
    
    return platform

def ascii_face() -> str:
    """
    Returnes cute ASCII-art face
    :return: ASCII-art face
    """
    return random.choice(
            [
                "„ÉΩ(‡πë‚ó†‹´‚ó†‡πë)Ôæâ",
                "(‚óï·¥•‚óï ã)",
                "·ïô(`‚ñΩ¬¥)·ïó",
                "(‚úø‚ó†‚Äø‚ó†)",
                "(‚ñ∞Àò‚ó°Àò‚ñ∞)",
                "(Àµ Õ°¬∞ Õú ñ Õ°¬∞Àµ)",
                " ï„Å£‚Ä¢·¥•‚Ä¢ î„Å£",
                "( Õ°¬∞ ·¥• Õ°¬∞)",
                "(‡πë‚Ä¢ÃÅ „ÉÆ ‚Ä¢ÃÄ‡πë)",
                "Ÿ©(^‚Äø^)€∂",
                "(„Å£ÀÜ⁄°ÀÜœÇ)",
                "œà(ÔΩÄ‚àá¬¥)œà",
                "‚äôœâ‚äô",
                "Ÿ©(^·¥ó^)€∂",
                "(¬¥„Éªœâ„Éª)„Å£Áî±",
                "( Õ°~ Õú ñ Õ°¬∞)",
                "‚úß‚ô°(‚óï‚Äø‚óï‚úø)",
                "‡πÇ‡πè‡Ø∞‡πè‡πÉ ‡∏∑",
                "‚à©ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°‚à© ‚ô°",
                "(‚ô°¬¥‡±™`‚ô°)",
                "(‚óçÔºû‚ó°Ôºú‚óç)‚ãà„ÄÇ‚úß‚ô°",
                "‚ï∞(‚úø¬¥‚å£`‚úø)‚ïØ‚ô°",
                " ï‚Ä¢·¥•‚Ä¢ î",
                "·∂ò ‚óï·¥•‚óï·∂Ö",
                "‚ñº„Éª·¥•„Éª‚ñº",
                "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
                "(ŒÑ‚óû‡∏¥‡±™‚óü‡∏¥‚Äµ)",
                "Ÿ©(^·¥ó^)€∂",
                "·ï¥ÔΩ∞·¥•ÔΩ∞·ïµ",
                " ïÔø´·¥•Ôø© î",
                " ï·µï·¥•·µï î",
                " ï·µí·¥•·µí î",
                "·µî·¥•·µî",
                "(‚úø‚ïπ‚ó°‚ïπ)",
                "(‡πëÔø´‹´Ôø©)",
                " ï¬∑·¥•¬∑„ÄÄ î",
                "(Ôæâ‚âß⁄°‚â¶)",
                "(‚âñ·¥ó‚âñ‚úø)",
                "Ôºà„Äú^‚àá^ )„Äú",
                "( ÔæâÔΩ•ÔΩ™ÔΩ• )Ôæâ",
                "~( Àò‚ñæÀò~)",
                "(„Äú^‚àá^)„Äú",
                "„ÉΩ(^·¥ó^„ÉΩ)",
                "(¬¥ÔΩ•œâÔΩ•`)",
                "‚Çç·ê¢‚Ä¢Ôªå‚Ä¢·ê¢‚Çé*ÔΩ•ÔæüÔΩ°",
                "(„ÄÇ„Éª„Éª)_‰∏î",
                "(=ÔΩÄœâ¬¥=)",
                "(*‚Ä¢‚Äø‚Ä¢*)",
                "(*Ôæü‚àÄÔæü*)",
                "(‚òâ‚ãÜ‚Äø‚ãÜ‚òâ)",
                "…∑‚ó°…∑",
                " ò‚Äø ò",
                "(„ÄÇ-œâ-)Ôæâ",
                "( ÔΩ•œâÔΩ•)Ôæâ",
                "(=ÔæüœâÔæü)Ôæâ",
                "(„ÉªŒµ„Éª`*) ‚Ä¶",
                " ï„Å£‚Ä¢·¥•‚Ä¢ î„Å£",
                "(*ÀòÔ∏∂Àò*)",
            ]
        )
    )


def random_id(size: int = 10) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        size (``int``, optional):
            –î–ª–∏–Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    """
    return "".join(
        random.choice(string.ascii_letters + string.digits)
        for _ in range(size)
    )

def get_git_info() -> typing.Tuple[str, str]:
    """
    Get git info
    :return: Git info
    """
    hash_ = get_git_hash()
    return (
        hash_,
        f"https://github.com/F1reWs/Shika/commit/{hash_}" if hash_ else "",
    )

def get_commit_url() -> str:
    """
    Get current Shika git commit url
    :return: Git commit url
    """
    try:
        hash_ = get_git_hash()
        return (
            f'<a href="https://github.com/F1reWs/Shika/commit/{hash_}">#{hash_[:7]}</a>'
        )
    except Exception:
        return "Unknown"
